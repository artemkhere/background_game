{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR, SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_TRIGGER_DISCONNECT } from '../actions/actionTypes';\nimport { setSocketLoading, handleSocketConnect } from '../actions/socketActions';\n\nconst createSocketMiddleware = url => {\n  let socket;\n  return storeAPI => next => action => {\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          setSocketLoading(storeAPI.dispatch, true);\n          socket = socket || socketIOClient(url);\n          socket.on('connect', data => {\n            // handle hydration of game state from this data\n            console.log(SOCKET_CONNECT);\n            storeAPI.dispatch({\n              type: SOCKET_SET_LOADING,\n              payload: false\n            });\n            storeAPI.dispatch({\n              type: SOCKET_CONNECT,\n              payload: data\n            });\n          });\n          socket.emit('hello', 'world');\n          socket.on(\"FromAPI\", message => {\n            console.log(message);\n            console.log(\"FromAPI\"); // storeAPI.dispatch({\n            //   type: \"SOCKET_MESSAGE_RECEIVED\",\n            //   payload : message\n            // });\n          }); // socket.on('connect_error', (error) => {\n          //   console.log(SOCKET_CONNECT_ERROR);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_CONNECT_ERROR,\n          //     payload: error\n          //   });\n          // });\n          //\n          // socket.on('error', (error) => {\n          //   console.log(SOCKET_ERROR);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_ERROR,\n          //     payload: error\n          //   });\n          // });\n          //\n          // socket.on('connect_timeout', (timeout) => {\n          //   console.log(SOCKET_TIMEOUT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_TIMEOUT,\n          //     payload: timeout\n          //   });\n          // });\n          //\n          // socket.on('disconnect', (timeout) => {\n          //   console.log(SOCKET_DISCONNECT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_DISCONNECT,\n          //     payload: timeout\n          //   });\n          // });\n        }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n};\n\nexport default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_CONNECT_ERROR","SOCKET_ERROR","SOCKET_TIMEOUT","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_TRIGGER_DISCONNECT","setSocketLoading","handleSocketConnect","createSocketMiddleware","url","socket","storeAPI","next","action","type","dispatch","on","data","console","log","SOCKET_SET_LOADING","payload","emit","message"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,sBADF,EAC0BC,oBAD1B,EACgDC,YADhD,EAEEC,cAFF,EAEkBC,cAFlB,EAEkCC,iBAFlC,EAGEC,yBAHF,QAIO,wBAJP;AAKA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,0BAAtD;;AAEA,MAAMC,sBAAsB,GAAIC,GAAD,IAAS;AACtC,MAAIC,MAAJ;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnC,YAAOA,MAAM,CAACC,IAAd;AACE,WAAKf,sBAAL;AAA6B;AAC3BO,UAAAA,gBAAgB,CAACK,QAAQ,CAACI,QAAV,EAAoB,IAApB,CAAhB;AAEAL,UAAAA,MAAM,GAAGA,MAAM,IAAIZ,cAAc,CAACW,GAAD,CAAjC;AAEAC,UAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7B;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYhB,cAAZ;AACAQ,YAAAA,QAAQ,CAACI,QAAT,CAAkB;AAChBD,cAAAA,IAAI,EAAEM,kBADU;AAEhBC,cAAAA,OAAO,EAAE;AAFO,aAAlB;AAIAV,YAAAA,QAAQ,CAACI,QAAT,CAAkB;AAChBD,cAAAA,IAAI,EAAEX,cADU;AAEhBkB,cAAAA,OAAO,EAAEJ;AAFO,aAAlB;AAID,WAXD;AAaAP,UAAAA,MAAM,CAACY,IAAP,CAAY,OAAZ,EAAqB,OAArB;AAEAZ,UAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAsBO,OAAD,IAAa;AAChCL,YAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACAL,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAFgC,CAGhC;AACA;AACA;AACA;AACD,WAPD,EApB2B,CA6B3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEF;;AAwEA,WAAOP,IAAI,CAACC,MAAD,CAAX;AACD,GA1ED;AA2ED,CA9ED;;AAgFA,eAAeL,sBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR,\n  SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_TRIGGER_DISCONNECT\n} from '../actions/actionTypes';\nimport { setSocketLoading, handleSocketConnect } from '../actions/socketActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        setSocketLoading(storeAPI.dispatch, true)\n\n        socket = socket || socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          // handle hydration of game state from this data\n          console.log(SOCKET_CONNECT);\n          storeAPI.dispatch({\n            type: SOCKET_SET_LOADING,\n            payload: false\n          });\n          storeAPI.dispatch({\n            type: SOCKET_CONNECT,\n            payload: data\n          });\n        });\n\n        socket.emit('hello', 'world');\n\n        socket.on(\"FromAPI\", (message) => {\n          console.log(message);\n          console.log(\"FromAPI\")\n          // storeAPI.dispatch({\n          //   type: \"SOCKET_MESSAGE_RECEIVED\",\n          //   payload : message\n          // });\n        });\n\n        // socket.on('connect_error', (error) => {\n        //   console.log(SOCKET_CONNECT_ERROR);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_CONNECT_ERROR,\n        //     payload: error\n        //   });\n        // });\n        //\n        // socket.on('error', (error) => {\n        //   console.log(SOCKET_ERROR);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_ERROR,\n        //     payload: error\n        //   });\n        // });\n        //\n        // socket.on('connect_timeout', (timeout) => {\n        //   console.log(SOCKET_TIMEOUT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_TIMEOUT,\n        //     payload: timeout\n        //   });\n        // });\n        //\n        // socket.on('disconnect', (timeout) => {\n        //   console.log(SOCKET_DISCONNECT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_DISCONNECT,\n        //     payload: timeout\n        //   });\n        // });\n      }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}