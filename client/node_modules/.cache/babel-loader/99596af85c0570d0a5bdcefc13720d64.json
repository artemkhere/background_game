{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR, SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_TRIGGER_DISCONNECT } from '../actions/actionTypes';\nlet socket;\n\nconst createSocketMiddleware = url => {\n  // shouldn't have any idea of connect or disconnect\n  // abstract this from reconnect logic\n  return storeAPI => next => action => {\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          // socket = socket || socketIOClient(url);\n          socket = socket || new WebSocket(\"ws://127.0.0.1:6969\");\n          console.log(socket);\n\n          socket.onopen = () => {\n            console.log(SOCKET_CONNECT);\n          }; // socket.on('connect', (data) => {\n          //   // handle hydration of game state from this data\n          //   console.log(SOCKET_CONNECT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_CONNECT,\n          //     payload: data\n          //   });\n          // });\n          //\n          // socket.emit('hello', 'world');\n          //\n          // socket.on(\"FromAPI\", (message) => {\n          //   console.log(message);\n          //   console.log(\"FromAPI\")\n          //   // storeAPI.dispatch({\n          //   //   type: \"SOCKET_MESSAGE_RECEIVED\",\n          //   //   payload : message\n          //   // });\n          // });\n          //\n          // console.log(\"socket.connected\")\n          // console.log(socket.connected)\n          //\n          // socket.on('connect_error', (error) => {\n          //   console.log(SOCKET_CONNECT_ERROR);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_CONNECT_ERROR,\n          //     payload: error\n          //   });\n          // });\n          //\n          // socket.on('error', (error) => {\n          //   console.log(SOCKET_ERROR);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_ERROR,\n          //     payload: error\n          //   });\n          // });\n          //\n          // socket.on('connect_timeout', (timeout) => {\n          //   console.log(SOCKET_TIMEOUT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_TIMEOUT,\n          //     payload: timeout\n          //   });\n          // });\n          //\n          // socket.on('disconnect', (timeout) => {\n          //   console.log(SOCKET_DISCONNECT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_DISCONNECT,\n          //     payload: timeout\n          //   });\n          // });\n\n        }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n};\n\nexport default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_CONNECT_ERROR","SOCKET_ERROR","SOCKET_TIMEOUT","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_TRIGGER_DISCONNECT","socket","createSocketMiddleware","url","storeAPI","next","action","type","WebSocket","console","log","onopen"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,sBADF,EAC0BC,oBAD1B,EACgDC,YADhD,EAEEC,cAFF,EAEkBC,cAFlB,EAEkCC,iBAFlC,EAGEC,yBAHF,QAIO,wBAJP;AAMA,IAAIC,MAAJ;;AAEA,MAAMC,sBAAsB,GAAIC,GAAD,IAAS;AACtC;AACA;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnC,YAAOA,MAAM,CAACC,IAAd;AACE,WAAKb,sBAAL;AAA6B;AAC3B;AACAO,UAAAA,MAAM,GAAGA,MAAM,IAAI,IAAIO,SAAJ,CAAc,qBAAd,CAAnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;;AAEAA,UAAAA,MAAM,CAACU,MAAP,GAAgB,MAAM;AACpBF,YAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACD,WAFD,CAL2B,CAS3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEF;;AA2EA,WAAOO,IAAI,CAACC,MAAD,CAAX;AACD,GA7ED;AA8ED,CAlFD;;AAoFA,eAAeJ,sBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR,\n  SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_TRIGGER_DISCONNECT\n} from '../actions/actionTypes';\n\nlet socket;\n\nconst createSocketMiddleware = (url) => {\n  // shouldn't have any idea of connect or disconnect\n  // abstract this from reconnect logic\n\n  return storeAPI => next => action => {\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        // socket = socket || socketIOClient(url);\n        socket = socket || new WebSocket(\"ws://127.0.0.1:6969\");\n        console.log(socket);\n\n        socket.onopen = () => {\n          console.log(SOCKET_CONNECT);\n        }\n\n        // socket.on('connect', (data) => {\n        //   // handle hydration of game state from this data\n        //   console.log(SOCKET_CONNECT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_CONNECT,\n        //     payload: data\n        //   });\n        // });\n        //\n        // socket.emit('hello', 'world');\n        //\n        // socket.on(\"FromAPI\", (message) => {\n        //   console.log(message);\n        //   console.log(\"FromAPI\")\n        //   // storeAPI.dispatch({\n        //   //   type: \"SOCKET_MESSAGE_RECEIVED\",\n        //   //   payload : message\n        //   // });\n        // });\n        //\n        // console.log(\"socket.connected\")\n        // console.log(socket.connected)\n        //\n        // socket.on('connect_error', (error) => {\n        //   console.log(SOCKET_CONNECT_ERROR);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_CONNECT_ERROR,\n        //     payload: error\n        //   });\n        // });\n        //\n        // socket.on('error', (error) => {\n        //   console.log(SOCKET_ERROR);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_ERROR,\n        //     payload: error\n        //   });\n        // });\n        //\n        // socket.on('connect_timeout', (timeout) => {\n        //   console.log(SOCKET_TIMEOUT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_TIMEOUT,\n        //     payload: timeout\n        //   });\n        // });\n        //\n        // socket.on('disconnect', (timeout) => {\n        //   console.log(SOCKET_DISCONNECT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_DISCONNECT,\n        //     payload: timeout\n        //   });\n        // });\n      }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}