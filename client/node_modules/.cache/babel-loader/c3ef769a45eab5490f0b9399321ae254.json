{"ast":null,"code":"var _jsxFileName = \"/Users/artemk/background_game/frontend/src/components/Signup.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { connectToSocket } from '../actions/socketActions';\nimport { setCurrentScreen, setApplicationLoading, setApplicationError } from '../actions/applicationStateActions';\nimport { setUserData } from '../actions/userActions';\n\nfunction Signup(props) {\n  const {\n    connectToSocket,\n    setCurrentScreen,\n    setUserData,\n    user,\n    setApplicationLoading,\n    setApplicationError,\n    gameSession\n  } = props;\n  const [signupStep, setSignupStep] = useState('SignupForm');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  console.log(gameSession.id);\n\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n  };\n\n  const handlePasswordChange = event => {\n    setPassword(event.target.value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setApplicationLoading(true);\n\n    try {\n      console.log(gameSession.id);\n      const newUserResponse = await axios.post(\"http://127.0.0.1:6969/api/signup\", {\n        email,\n        password,\n        gameSaveID: gameSession.id\n      });\n      localStorage.setItem('jwt', newUserResponse.data.jwt);\n      const userData = {\n        id: newUserResponse.data.id,\n        email: newUserResponse.data.email,\n        loggedIn: true\n      };\n      setUserData(userData);\n      setSignupStep('SignupSuccess');\n      setApplicationLoading(false);\n    } catch (error) {\n      setApplicationError(error);\n    }\n  };\n\n  const signupForm = () => {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"Sign Up For An Account\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\",\n      value: email,\n      onChange: handleEmailChange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Password\",\n      value: password,\n      onChange: handlePasswordChange,\n      minLength: \"4\",\n      maxLength: \"24\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const handleStartNewGame = () => {\n    setCurrentScreen('GameSession'); // in this connectToSocket I will need to pass userID and jwt\n\n    connectToSocket();\n  };\n\n  const signupSuccess = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Congrats, your account had been created!\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"Signed in as: \", user.email), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \"User ID: \", user.id), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleStartNewGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"Start New Game\"));\n  };\n\n  const renderSignupStep = () => {\n    let toRender;\n\n    switch (signupStep) {\n      case 'SignupForm':\n        toRender = signupForm();\n        break;\n\n      case 'SignupSuccess':\n        toRender = signupSuccess();\n        break;\n\n      default:\n        toRender = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 20\n          }\n        }, \"Error\");\n    }\n\n    return toRender;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, renderSignupStep());\n}\n\nfunction mapStateToProps(state) {\n  return {\n    socket: state.socket,\n    user: state.user,\n    gameSession: state.gameSession\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch),\n    setUserData: setUserData(dispatch),\n    setApplicationLoading: setApplicationLoading(dispatch),\n    setApplicationError: setApplicationError(dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/components/Signup.jsx"],"names":["React","useState","connect","axios","connectToSocket","setCurrentScreen","setApplicationLoading","setApplicationError","setUserData","Signup","props","user","gameSession","signupStep","setSignupStep","email","setEmail","password","setPassword","console","log","id","handleEmailChange","event","target","value","handlePasswordChange","handleSubmit","preventDefault","newUserResponse","post","gameSaveID","localStorage","setItem","data","jwt","userData","loggedIn","error","signupForm","handleStartNewGame","signupSuccess","textAlign","renderSignupStep","toRender","mapStateToProps","state","socket","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport { connectToSocket } from '../actions/socketActions';\nimport {\n  setCurrentScreen, setApplicationLoading, setApplicationError\n} from '../actions/applicationStateActions';\nimport { setUserData } from '../actions/userActions';\n\nfunction Signup(props) {\n  const {\n    connectToSocket, setCurrentScreen, setUserData, user,\n    setApplicationLoading, setApplicationError, gameSession\n  } = props;\n  const [signupStep, setSignupStep] = useState('SignupForm');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  console.log(gameSession.id)\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  }\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setApplicationLoading(true);\n\n    try {\n      console.log(gameSession.id)\n      const newUserResponse = await axios.post(\"http://127.0.0.1:6969/api/signup\", {\n        email,\n        password,\n        gameSaveID: gameSession.id\n      });\n      localStorage.setItem('jwt', newUserResponse.data.jwt);\n      const userData = {\n        id: newUserResponse.data.id,\n        email: newUserResponse.data.email,\n        loggedIn: true\n      };\n      setUserData(userData);\n      setSignupStep('SignupSuccess');\n      setApplicationLoading(false);\n    } catch (error) {\n      setApplicationError(error);\n    }\n  }\n\n  const signupForm = () => {\n    return (\n      <form onSubmit={handleSubmit}>\n        <h1>Sign Up For An Account</h1>\n        <label>Email</label>\n        <input\n          name='email'\n          type='email'\n          placeholder='Email'\n          value={email}\n          onChange={handleEmailChange}\n          required\n        />\n        <br/>\n        <label>Password</label>\n        <input\n          type='password'\n          name='password'\n          placeholder='Password'\n          value={password}\n          onChange={handlePasswordChange}\n          minLength=\"4\"\n          maxLength=\"24\"\n          required\n        />\n        <input type='submit'/>\n      </form>\n    );\n  }\n\n  const handleStartNewGame = () => {\n    setCurrentScreen('GameSession');\n    // in this connectToSocket I will need to pass userID and jwt\n    connectToSocket();\n  }\n\n  const signupSuccess = () => {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <div>Congrats, your account had been created!</div>\n        <div>Signed in as: {user.email}</div>\n        <div>User ID: {user.id}</div>\n        <button onClick={handleStartNewGame}>Start New Game</button>\n      </div>\n    );\n  }\n\n  const renderSignupStep = () => {\n    let toRender;\n\n    switch(signupStep) {\n      case 'SignupForm':\n        toRender = signupForm();\n        break;\n      case 'SignupSuccess':\n        toRender = signupSuccess();\n        break;\n      default:\n        toRender = <div>Error</div>;\n    }\n\n    return toRender;\n  }\n\n  return (\n    <div>{renderSignupStep()}</div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    socket: state.socket,\n    user: state.user,\n    gameSession: state.gameSession\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch),\n    setUserData: setUserData(dispatch),\n    setApplicationLoading: setApplicationLoading(dispatch),\n    setApplicationError: setApplicationError(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Signup);\n"]},"metadata":{},"sourceType":"module"}