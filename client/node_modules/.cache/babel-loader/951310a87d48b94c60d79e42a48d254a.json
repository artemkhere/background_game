{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR, SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_TRIGGER_DISCONNECT } from '../actions/actionTypes';\nexport default function createSocketMiddleware(url) {\n  let socket;\n\n  if (socket) {\n    socket.on('connect_error', error => {\n      console.log(SOCKET_CONNECT_ERROR);\n      storeAPI.dispatch({\n        type: SOCKET_CONNECT_ERROR,\n        payload: error\n      });\n    });\n    socket.on('error', error => {\n      console.log(SOCKET_ERROR);\n      storeAPI.dispatch({\n        type: SOCKET_ERROR,\n        payload: error\n      });\n    });\n    socket.on('connect_timeout', timeout => {\n      console.log(SOCKET_TIMEOUT);\n      storeAPI.dispatch({\n        type: SOCKET_TIMEOUT,\n        payload: timeout\n      });\n    });\n    socket.on('connect', data => {\n      // handle hydration of game state from this data\n      console.log(SOCKET_CONNECT);\n      storeAPI.dispatch({\n        type: SOCKET_CONNECT,\n        payload: data\n      });\n    });\n    socket.on('disconnect', timeout => {\n      console.log(SOCKET_DISCONNECT);\n      storeAPI.dispatch({\n        type: SOCKET_DISCONNECT,\n        payload: timeout\n      });\n    });\n  }\n\n  return storeAPI => next => action => {\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          socket = socketIOClient(url); // socket.on(\"message\", (message) => {\n          //   storeAPI.dispatch({\n          //     type: \"SOCKET_MESSAGE_RECEIVED\",\n          //     payload : message\n          //   });\n          // });\n        }\n\n      case SOCKET_TRIGGER_DISCONNECT:\n        {\n          if (socket) {\n            socket.disconnect();\n          }\n        }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n}","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_CONNECT_ERROR","SOCKET_ERROR","SOCKET_TIMEOUT","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_TRIGGER_DISCONNECT","createSocketMiddleware","url","socket","on","error","console","log","storeAPI","dispatch","type","payload","timeout","data","next","action","disconnect"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,sBADF,EAC0BC,oBAD1B,EACgDC,YADhD,EAEEC,cAFF,EAEkBC,cAFlB,EAEkCC,iBAFlC,EAGEC,yBAHF,QAIO,wBAJP;AAMA,eAAe,SAASC,sBAAT,CAAgCC,GAAhC,EAAqC;AAClD,MAAIC,MAAJ;;AAEA,MAAIA,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACC,EAAP,CAAU,eAAV,EAA4BC,KAAD,IAAW;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,oBAAZ;AACAa,MAAAA,QAAQ,CAACC,QAAT,CAAkB;AAChBC,QAAAA,IAAI,EAAEf,oBADU;AAEhBgB,QAAAA,OAAO,EAAEN;AAFO,OAAlB;AAID,KAND;AAQAF,IAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAoBC,KAAD,IAAW;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYX,YAAZ;AACAY,MAAAA,QAAQ,CAACC,QAAT,CAAkB;AAChBC,QAAAA,IAAI,EAAEd,YADU;AAEhBe,QAAAA,OAAO,EAAEN;AAFO,OAAlB;AAID,KAND;AAQAF,IAAAA,MAAM,CAACC,EAAP,CAAU,iBAAV,EAA8BQ,OAAD,IAAa;AACxCN,MAAAA,OAAO,CAACC,GAAR,CAAYV,cAAZ;AACAW,MAAAA,QAAQ,CAACC,QAAT,CAAkB;AAChBC,QAAAA,IAAI,EAAEb,cADU;AAEhBc,QAAAA,OAAO,EAAEC;AAFO,OAAlB;AAID,KAND;AAQAT,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBS,IAAD,IAAU;AAC7B;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACAU,MAAAA,QAAQ,CAACC,QAAT,CAAkB;AAChBC,QAAAA,IAAI,EAAEZ,cADU;AAEhBa,QAAAA,OAAO,EAAEE;AAFO,OAAlB;AAID,KAPD;AASAV,IAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAyBQ,OAAD,IAAa;AACnCN,MAAAA,OAAO,CAACC,GAAR,CAAYR,iBAAZ;AACAS,MAAAA,QAAQ,CAACC,QAAT,CAAkB;AAChBC,QAAAA,IAAI,EAAEX,iBADU;AAEhBY,QAAAA,OAAO,EAAEC;AAFO,OAAlB;AAID,KAND;AAOD;;AAED,SAAOJ,QAAQ,IAAIM,IAAI,IAAIC,MAAM,IAAI;AACnC,YAAOA,MAAM,CAACL,IAAd;AACE,WAAKhB,sBAAL;AAA6B;AAC3BS,UAAAA,MAAM,GAAGV,cAAc,CAACS,GAAD,CAAvB,CAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAKF,yBAAL;AAAgC;AAC9B,cAAIG,MAAJ,EAAY;AAAEA,YAAAA,MAAM,CAACa,UAAP;AAAsB;AACrC;AACD;AACA;AACA;AACA;AACA;AAjBF;;AAoBA,WAAOF,IAAI,CAACC,MAAD,CAAX;AACD,GAtBD;AAuBD","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR,\n  SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_TRIGGER_DISCONNECT\n} from '../actions/actionTypes';\n\nexport default function createSocketMiddleware(url) {\n  let socket;\n\n  if (socket) {\n    socket.on('connect_error', (error) => {\n      console.log(SOCKET_CONNECT_ERROR);\n      storeAPI.dispatch({\n        type: SOCKET_CONNECT_ERROR,\n        payload: error\n      });\n    });\n\n    socket.on('error', (error) => {\n      console.log(SOCKET_ERROR);\n      storeAPI.dispatch({\n        type: SOCKET_ERROR,\n        payload: error\n      });\n    });\n\n    socket.on('connect_timeout', (timeout) => {\n      console.log(SOCKET_TIMEOUT);\n      storeAPI.dispatch({\n        type: SOCKET_TIMEOUT,\n        payload: timeout\n      });\n    });\n\n    socket.on('connect', (data) => {\n      // handle hydration of game state from this data\n      console.log(SOCKET_CONNECT);\n      storeAPI.dispatch({\n        type: SOCKET_CONNECT,\n        payload: data\n      });\n    });\n\n    socket.on('disconnect', (timeout) => {\n      console.log(SOCKET_DISCONNECT);\n      storeAPI.dispatch({\n        type: SOCKET_DISCONNECT,\n        payload: timeout\n      });\n    });\n  }\n\n  return storeAPI => next => action => {\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        socket = socketIOClient(url);\n        // socket.on(\"message\", (message) => {\n        //   storeAPI.dispatch({\n        //     type: \"SOCKET_MESSAGE_RECEIVED\",\n        //     payload : message\n        //   });\n        // });\n      }\n      case SOCKET_TRIGGER_DISCONNECT: {\n        if (socket) { socket.disconnect(); }\n      }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}