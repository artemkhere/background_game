{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR, SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_TRIGGER_DISCONNECT } from '../actions/actionTypes';\nexport default function createSocketMiddleware(url) {\n  let socket;\n  return storeAPI => next => action => {\n    if (socket) {\n      socket.on('connect_error', error => {\n        console.log(SOCKET_CONNECT_ERROR);\n        storeAPI.dispatch({\n          type: SOCKET_CONNECT_ERROR,\n          payload: error\n        });\n      });\n      socket.on('error', error => {\n        console.log(SOCKET_ERROR);\n        storeAPI.dispatch({\n          type: SOCKET_ERROR,\n          payload: error\n        });\n      });\n      socket.on('connect_timeout', timeout => {\n        console.log(SOCKET_TIMEOUT);\n        storeAPI.dispatch({\n          type: SOCKET_TIMEOUT,\n          payload: timeout\n        });\n      });\n      socket.on('connect', data => {\n        // handle hydration of game state from this data\n        console.log(SOCKET_CONNECT);\n        storeAPI.dispatch({\n          type: SOCKET_CONNECT,\n          payload: data\n        });\n      });\n      socket.on('disconnect', timeout => {\n        console.log(SOCKET_DISCONNECT);\n        storeAPI.dispatch({\n          type: SOCKET_DISCONNECT,\n          payload: timeout\n        });\n      });\n    }\n\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          socket = socketIOClient(url);\n          return; // socket.on(\"message\", (message) => {\n          //   storeAPI.dispatch({\n          //     type: \"SOCKET_MESSAGE_RECEIVED\",\n          //     payload : message\n          //   });\n          // });\n        }\n\n      case SOCKET_TRIGGER_DISCONNECT:\n        {\n          if (socket) {\n            socket.disconnect();\n          }\n        }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n}","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_CONNECT_ERROR","SOCKET_ERROR","SOCKET_TIMEOUT","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_TRIGGER_DISCONNECT","createSocketMiddleware","url","socket","storeAPI","next","action","on","error","console","log","dispatch","type","payload","timeout","data","disconnect"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,sBADF,EAC0BC,oBAD1B,EACgDC,YADhD,EAEEC,cAFF,EAEkBC,cAFlB,EAEkCC,iBAFlC,EAGEC,yBAHF,QAIO,wBAJP;AAMA,eAAe,SAASC,sBAAT,CAAgCC,GAAhC,EAAqC;AAClD,MAAIC,MAAJ;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnC,QAAIH,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACI,EAAP,CAAU,eAAV,EAA4BC,KAAD,IAAW;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAYf,oBAAZ;AACAS,QAAAA,QAAQ,CAACO,QAAT,CAAkB;AAChBC,UAAAA,IAAI,EAAEjB,oBADU;AAEhBkB,UAAAA,OAAO,EAAEL;AAFO,SAAlB;AAID,OAND;AAQAL,MAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAoBC,KAAD,IAAW;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;AACAQ,QAAAA,QAAQ,CAACO,QAAT,CAAkB;AAChBC,UAAAA,IAAI,EAAEhB,YADU;AAEhBiB,UAAAA,OAAO,EAAEL;AAFO,SAAlB;AAID,OAND;AAQAL,MAAAA,MAAM,CAACI,EAAP,CAAU,iBAAV,EAA8BO,OAAD,IAAa;AACxCL,QAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ;AACAO,QAAAA,QAAQ,CAACO,QAAT,CAAkB;AAChBC,UAAAA,IAAI,EAAEf,cADU;AAEhBgB,UAAAA,OAAO,EAAEC;AAFO,SAAlB;AAID,OAND;AAQAX,MAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAsBQ,IAAD,IAAU;AAC7B;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACAM,QAAAA,QAAQ,CAACO,QAAT,CAAkB;AAChBC,UAAAA,IAAI,EAAEd,cADU;AAEhBe,UAAAA,OAAO,EAAEE;AAFO,SAAlB;AAID,OAPD;AASAZ,MAAAA,MAAM,CAACI,EAAP,CAAU,YAAV,EAAyBO,OAAD,IAAa;AACnCL,QAAAA,OAAO,CAACC,GAAR,CAAYX,iBAAZ;AACAK,QAAAA,QAAQ,CAACO,QAAT,CAAkB;AAChBC,UAAAA,IAAI,EAAEb,iBADU;AAEhBc,UAAAA,OAAO,EAAEC;AAFO,SAAlB;AAID,OAND;AAOD;;AAED,YAAOR,MAAM,CAACM,IAAd;AACE,WAAKlB,sBAAL;AAA6B;AAC3BS,UAAAA,MAAM,GAAGV,cAAc,CAACS,GAAD,CAAvB;AACA,iBAF2B,CAG3B;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAKF,yBAAL;AAAgC;AAC9B,cAAIG,MAAJ,EAAY;AAAEA,YAAAA,MAAM,CAACa,UAAP;AAAsB;AACrC;AACD;AACA;AACA;AACA;AACA;AAlBF;;AAqBA,WAAOX,IAAI,CAACC,MAAD,CAAX;AACD,GAlED;AAmED","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR,\n  SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_TRIGGER_DISCONNECT\n} from '../actions/actionTypes';\n\nexport default function createSocketMiddleware(url) {\n  let socket;\n\n  return storeAPI => next => action => {\n    if (socket) {\n      socket.on('connect_error', (error) => {\n        console.log(SOCKET_CONNECT_ERROR);\n        storeAPI.dispatch({\n          type: SOCKET_CONNECT_ERROR,\n          payload: error\n        });\n      });\n\n      socket.on('error', (error) => {\n        console.log(SOCKET_ERROR);\n        storeAPI.dispatch({\n          type: SOCKET_ERROR,\n          payload: error\n        });\n      });\n\n      socket.on('connect_timeout', (timeout) => {\n        console.log(SOCKET_TIMEOUT);\n        storeAPI.dispatch({\n          type: SOCKET_TIMEOUT,\n          payload: timeout\n        });\n      });\n\n      socket.on('connect', (data) => {\n        // handle hydration of game state from this data\n        console.log(SOCKET_CONNECT);\n        storeAPI.dispatch({\n          type: SOCKET_CONNECT,\n          payload: data\n        });\n      });\n\n      socket.on('disconnect', (timeout) => {\n        console.log(SOCKET_DISCONNECT);\n        storeAPI.dispatch({\n          type: SOCKET_DISCONNECT,\n          payload: timeout\n        });\n      });\n    }\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        socket = socketIOClient(url);\n        return;\n        // socket.on(\"message\", (message) => {\n        //   storeAPI.dispatch({\n        //     type: \"SOCKET_MESSAGE_RECEIVED\",\n        //     payload : message\n        //   });\n        // });\n      }\n      case SOCKET_TRIGGER_DISCONNECT: {\n        if (socket) { socket.disconnect(); }\n      }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}