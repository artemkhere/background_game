{"ast":null,"code":"import socketIOClient from'socket.io-client';import{SOCKET_TRIGGER_CONNECT,SOCKET_TRIGGER_DISCONNECT,SOCKET_EMIT}from'../actions/actionTypes';import{setSocketLoading,handleSocketConnect,setSocketError}from'../actions/socketActions';import{setApplicationError}from'../actions/applicationStateActions';import{updateGameSession}from'../actions/gameSessionActions';var createSocketMiddleware=function createSocketMiddleware(url){var socket;return function(storeAPI){return function(next){return function(action){var dispatch=storeAPI.dispatch;switch(action.type){case SOCKET_TRIGGER_CONNECT:setSocketLoading(dispatch,true);// drop old connection if trying to reconnect\nif(socket){socket.disconnect();}socket=socketIOClient(url);socket.on('connect',function(data){var _storeAPI$getState=storeAPI.getState(),user=_storeAPI$getState.user;handleSocketConnect(dispatch,user);});socket.on('connect_error',function(error){setSocketError(dispatch,error);});socket.on('error',function(error){setSocketError(dispatch,error);});socket.on('gameSessionError',function(error){setSocketError(dispatch,error);});socket.on('operationFailed',function(error){setApplicationError(dispatch)(error);});socket.on('connect_timeout',function(timeout){setSocketError(dispatch,timeout);});socket.on('disconnect',function(reason){// reason is a String\n// ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\nsetSocketError(dispatch,{message:reason});});socket.on('updateGameSession',function(data){updateGameSession(dispatch,data);});break;case SOCKET_TRIGGER_DISCONNECT:if(socket){socket.disconnect();}return;case SOCKET_EMIT:var eventName=action.payload.eventName;var data=action.payload.data||{};if(socket&&socket.connected){socket.emit(eventName,data);}else{setSocketError(dispatch,{message:'Socket is not connected'});}return;default:break;}return next(action);};};};};export default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_TRIGGER_DISCONNECT","SOCKET_EMIT","setSocketLoading","handleSocketConnect","setSocketError","setApplicationError","updateGameSession","createSocketMiddleware","url","socket","storeAPI","next","action","dispatch","type","disconnect","on","data","getState","user","error","timeout","reason","message","eventName","payload","connected","emit"],"mappings":"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","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_TRIGGER_DISCONNECT, SOCKET_EMIT\n} from '../actions/actionTypes';\nimport {\n  setSocketLoading, handleSocketConnect, setSocketError\n} from '../actions/socketActions';\nimport { setApplicationError } from '../actions/applicationStateActions';\nimport { updateGameSession } from '../actions/gameSessionActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        setSocketLoading(dispatch, true);\n\n        // drop old connection if trying to reconnect\n        if (socket) { socket.disconnect(); }\n\n        socket = socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          const { user } = storeAPI.getState();\n          handleSocketConnect(dispatch, user);\n        });\n\n        socket.on('connect_error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('gameSessionError', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('operationFailed', (error) => {\n          setApplicationError(dispatch)(error);\n        });\n\n        socket.on('connect_timeout', (timeout) => {\n          setSocketError(dispatch, timeout);\n        });\n\n        socket.on('disconnect', (reason) => {\n          // reason is a String\n          // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n          setSocketError(dispatch, { message: reason });\n        });\n\n        socket.on('updateGameSession', (data) => {\n          updateGameSession(dispatch, data);\n        });\n\n        break;\n      case SOCKET_TRIGGER_DISCONNECT:\n        if (socket) { socket.disconnect(); }\n        return;\n      case SOCKET_EMIT:\n        const { eventName } = action.payload;\n        const data = action.payload.data || {};\n\n        if (socket && socket.connected) {\n          socket.emit(eventName, data);\n        } else {\n          setSocketError(dispatch, { message: 'Socket is not connected' });\n        }\n        return;\n      default:\n        break;\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}