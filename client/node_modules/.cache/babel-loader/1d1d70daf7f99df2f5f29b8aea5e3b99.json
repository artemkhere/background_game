{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR, SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT, SOCKET_TRIGGER_DISCONNECT } from '../actions/actionTypes';\nexport default function createSocketMiddleware(url) {\n  let socket;\n  return storeAPI => next => action => {\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          socket = socketIOClient(url);\n\n          if (socket) {\n            socket.on('connect_error', error => {\n              console.log(SOCKET_CONNECT_ERROR);\n              storeAPI.dispatch({\n                type: SOCKET_CONNECT_ERROR,\n                payload: error\n              });\n            });\n            socket.on('error', error => {\n              console.log(SOCKET_ERROR);\n              storeAPI.dispatch({\n                type: SOCKET_ERROR,\n                payload: error\n              });\n            });\n            socket.on('connect_timeout', timeout => {\n              console.log(SOCKET_TIMEOUT);\n              storeAPI.dispatch({\n                type: SOCKET_TIMEOUT,\n                payload: timeout\n              });\n            });\n            socket.on('connect', data => {\n              // handle hydration of game state from this data\n              console.log(SOCKET_CONNECT);\n              storeAPI.dispatch({\n                type: SOCKET_CONNECT,\n                payload: data\n              });\n            });\n            socket.on('disconnect', timeout => {\n              console.log(SOCKET_DISCONNECT);\n              storeAPI.dispatch({\n                type: SOCKET_DISCONNECT,\n                payload: timeout\n              });\n            });\n          }\n\n          return; // socket.on(\"message\", (message) => {\n          //   storeAPI.dispatch({\n          //     type: \"SOCKET_MESSAGE_RECEIVED\",\n          //     payload : message\n          //   });\n          // });\n        }\n\n      case SOCKET_TRIGGER_DISCONNECT:\n        {\n          if (socket) {\n            socket.disconnect();\n          }\n        }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n}","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_CONNECT_ERROR","SOCKET_ERROR","SOCKET_TIMEOUT","SOCKET_CONNECT","SOCKET_DISCONNECT","SOCKET_TRIGGER_DISCONNECT","createSocketMiddleware","url","socket","storeAPI","next","action","type","on","error","console","log","dispatch","payload","timeout","data","disconnect"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,sBADF,EAC0BC,oBAD1B,EACgDC,YADhD,EAEEC,cAFF,EAEkBC,cAFlB,EAEkCC,iBAFlC,EAGEC,yBAHF,QAIO,wBAJP;AAMA,eAAe,SAASC,sBAAT,CAAgCC,GAAhC,EAAqC;AAClD,MAAIC,MAAJ;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnC,YAAOA,MAAM,CAACC,IAAd;AACE,WAAKb,sBAAL;AAA6B;AAC3BS,UAAAA,MAAM,GAAGV,cAAc,CAACS,GAAD,CAAvB;;AAEA,cAAIC,MAAJ,EAAY;AACVA,YAAAA,MAAM,CAACK,EAAP,CAAU,eAAV,EAA4BC,KAAD,IAAW;AACpCC,cAAAA,OAAO,CAACC,GAAR,CAAYhB,oBAAZ;AACAS,cAAAA,QAAQ,CAACQ,QAAT,CAAkB;AAChBL,gBAAAA,IAAI,EAAEZ,oBADU;AAEhBkB,gBAAAA,OAAO,EAAEJ;AAFO,eAAlB;AAID,aAND;AAQAN,YAAAA,MAAM,CAACK,EAAP,CAAU,OAAV,EAAoBC,KAAD,IAAW;AAC5BC,cAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ;AACAQ,cAAAA,QAAQ,CAACQ,QAAT,CAAkB;AAChBL,gBAAAA,IAAI,EAAEX,YADU;AAEhBiB,gBAAAA,OAAO,EAAEJ;AAFO,eAAlB;AAID,aAND;AAQAN,YAAAA,MAAM,CAACK,EAAP,CAAU,iBAAV,EAA8BM,OAAD,IAAa;AACxCJ,cAAAA,OAAO,CAACC,GAAR,CAAYd,cAAZ;AACAO,cAAAA,QAAQ,CAACQ,QAAT,CAAkB;AAChBL,gBAAAA,IAAI,EAAEV,cADU;AAEhBgB,gBAAAA,OAAO,EAAEC;AAFO,eAAlB;AAID,aAND;AAQAX,YAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAsBO,IAAD,IAAU;AAC7B;AACAL,cAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ;AACAM,cAAAA,QAAQ,CAACQ,QAAT,CAAkB;AAChBL,gBAAAA,IAAI,EAAET,cADU;AAEhBe,gBAAAA,OAAO,EAAEE;AAFO,eAAlB;AAID,aAPD;AASAZ,YAAAA,MAAM,CAACK,EAAP,CAAU,YAAV,EAAyBM,OAAD,IAAa;AACnCJ,cAAAA,OAAO,CAACC,GAAR,CAAYZ,iBAAZ;AACAK,cAAAA,QAAQ,CAACQ,QAAT,CAAkB;AAChBL,gBAAAA,IAAI,EAAER,iBADU;AAEhBc,gBAAAA,OAAO,EAAEC;AAFO,eAAlB;AAID,aAND;AAOD;;AAED,iBA9C2B,CA+C3B;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAKd,yBAAL;AAAgC;AAC9B,cAAIG,MAAJ,EAAY;AAAEA,YAAAA,MAAM,CAACa,UAAP;AAAsB;AACrC;AACD;AACA;AACA;AACA;AACA;AA9DF;;AAiEA,WAAOX,IAAI,CAACC,MAAD,CAAX;AACD,GAnED;AAoED","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_CONNECT_ERROR, SOCKET_ERROR,\n  SOCKET_TIMEOUT, SOCKET_CONNECT, SOCKET_DISCONNECT,\n  SOCKET_TRIGGER_DISCONNECT\n} from '../actions/actionTypes';\n\nexport default function createSocketMiddleware(url) {\n  let socket;\n\n  return storeAPI => next => action => {\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        socket = socketIOClient(url);\n        \n        if (socket) {\n          socket.on('connect_error', (error) => {\n            console.log(SOCKET_CONNECT_ERROR);\n            storeAPI.dispatch({\n              type: SOCKET_CONNECT_ERROR,\n              payload: error\n            });\n          });\n\n          socket.on('error', (error) => {\n            console.log(SOCKET_ERROR);\n            storeAPI.dispatch({\n              type: SOCKET_ERROR,\n              payload: error\n            });\n          });\n\n          socket.on('connect_timeout', (timeout) => {\n            console.log(SOCKET_TIMEOUT);\n            storeAPI.dispatch({\n              type: SOCKET_TIMEOUT,\n              payload: timeout\n            });\n          });\n\n          socket.on('connect', (data) => {\n            // handle hydration of game state from this data\n            console.log(SOCKET_CONNECT);\n            storeAPI.dispatch({\n              type: SOCKET_CONNECT,\n              payload: data\n            });\n          });\n\n          socket.on('disconnect', (timeout) => {\n            console.log(SOCKET_DISCONNECT);\n            storeAPI.dispatch({\n              type: SOCKET_DISCONNECT,\n              payload: timeout\n            });\n          });\n        }\n\n        return;\n        // socket.on(\"message\", (message) => {\n        //   storeAPI.dispatch({\n        //     type: \"SOCKET_MESSAGE_RECEIVED\",\n        //     payload : message\n        //   });\n        // });\n      }\n      case SOCKET_TRIGGER_DISCONNECT: {\n        if (socket) { socket.disconnect(); }\n      }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}