{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { setSocketLoading, handleSocketConnect, setSocketError } from '../actions/socketActions';\n\nconst createSocketMiddleware = url => {\n  let socket;\n  return storeAPI => next => action => {\n    dispatch = storeAPI.dispatch;\n\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          setSocketLoading(storeAPI.dispatch, true);\n          socket = socket || socketIOClient(url);\n          socket.on('connect', data => {\n            handleSocketConnect(storeAPI.dispatch, data);\n          });\n          socket.on('connect_error', error => {\n            setSocketError();\n            storeAPI.dispatch({\n              type: SOCKET_CONNECT_ERROR,\n              payload: error\n            });\n          }); // socket.emit('hello', 'world');\n          // socket.on(\"FromAPI\", (message) => {\n          //   // storeAPI.dispatch({\n          //   //   type: \"SOCKET_MESSAGE_RECEIVED\",\n          //   //   payload : message\n          //   // });\n          // });\n          //\n          // socket.on('error', (error) => {\n          //   console.log(SOCKET_ERROR);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_ERROR,\n          //     payload: error\n          //   });\n          // });\n          //\n          // socket.on('connect_timeout', (timeout) => {\n          //   console.log(SOCKET_TIMEOUT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_TIMEOUT,\n          //     payload: timeout\n          //   });\n          // });\n          //\n          // socket.on('disconnect', (timeout) => {\n          //   console.log(SOCKET_DISCONNECT);\n          //   storeAPI.dispatch({\n          //     type: SOCKET_DISCONNECT,\n          //     payload: timeout\n          //   });\n          // });\n        }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n};\n\nexport default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","setSocketLoading","handleSocketConnect","setSocketError","createSocketMiddleware","url","socket","storeAPI","next","action","dispatch","type","SOCKET_TRIGGER_CONNECT","on","data","error","SOCKET_CONNECT_ERROR","payload"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,gBADF,EACoBC,mBADpB,EACyCC,cADzC,QAEO,0BAFP;;AAIA,MAAMC,sBAAsB,GAAIC,GAAD,IAAS;AACtC,MAAIC,MAAJ;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnCC,IAAAA,QAAQ,GAAGH,QAAQ,CAACG,QAApB;;AAEA,YAAOD,MAAM,CAACE,IAAd;AACE,WAAKC,sBAAL;AAA6B;AAC3BX,UAAAA,gBAAgB,CAACM,QAAQ,CAACG,QAAV,EAAoB,IAApB,CAAhB;AAEAJ,UAAAA,MAAM,GAAGA,MAAM,IAAIN,cAAc,CAACK,GAAD,CAAjC;AAEAC,UAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7BZ,YAAAA,mBAAmB,CAACK,QAAQ,CAACG,QAAV,EAAoBI,IAApB,CAAnB;AACD,WAFD;AAIAR,UAAAA,MAAM,CAACO,EAAP,CAAU,eAAV,EAA4BE,KAAD,IAAW;AACpCZ,YAAAA,cAAc;AACdI,YAAAA,QAAQ,CAACG,QAAT,CAAkB;AAChBC,cAAAA,IAAI,EAAEK,oBADU;AAEhBC,cAAAA,OAAO,EAAEF;AAFO,aAAlB;AAID,WAND,EAT2B,CAiB3B;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DF;;AA+DA,WAAOP,IAAI,CAACC,MAAD,CAAX;AACD,GAnED;AAoED,CAvED;;AAyEA,eAAeL,sBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  setSocketLoading, handleSocketConnect, setSocketError\n} from '../actions/socketActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    dispatch = storeAPI.dispatch;\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        setSocketLoading(storeAPI.dispatch, true);\n\n        socket = socket || socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          handleSocketConnect(storeAPI.dispatch, data);\n        });\n\n        socket.on('connect_error', (error) => {\n          setSocketError()\n          storeAPI.dispatch({\n            type: SOCKET_CONNECT_ERROR,\n            payload: error\n          });\n        });\n\n        // socket.emit('hello', 'world');\n\n        // socket.on(\"FromAPI\", (message) => {\n        //   // storeAPI.dispatch({\n        //   //   type: \"SOCKET_MESSAGE_RECEIVED\",\n        //   //   payload : message\n        //   // });\n        // });\n\n\n        //\n        // socket.on('error', (error) => {\n        //   console.log(SOCKET_ERROR);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_ERROR,\n        //     payload: error\n        //   });\n        // });\n        //\n        // socket.on('connect_timeout', (timeout) => {\n        //   console.log(SOCKET_TIMEOUT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_TIMEOUT,\n        //     payload: timeout\n        //   });\n        // });\n        //\n        // socket.on('disconnect', (timeout) => {\n        //   console.log(SOCKET_DISCONNECT);\n        //   storeAPI.dispatch({\n        //     type: SOCKET_DISCONNECT,\n        //     payload: timeout\n        //   });\n        // });\n      }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}