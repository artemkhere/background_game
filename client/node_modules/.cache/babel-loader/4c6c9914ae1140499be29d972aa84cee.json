{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT } from '../actions/actionTypes';\nimport { setSocketLoading, handleSocketConnect, setSocketError } from '../actions/socketActions';\n\nconst createSocketMiddleware = url => {\n  let socket;\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          setSocketLoading(dispatch, true);\n          socket = socket || socketIOClient(url);\n          socket.on('connect', data => {\n            handleSocketConnect(dispatch, data);\n          });\n          socket.on('connect_error', error => {\n            setSocketError(dispatch, error);\n          });\n          socket.on('error', error => {\n            setSocketError(dispatch, error);\n          });\n          socket.on('connect_timeout', timeout => {\n            setSocketError(dispatch, timeout);\n          });\n          socket.on('disconnect', reason => {\n            // reason is a String\n            // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n            setSocketError(dispatch, {\n              message: reason\n            });\n          }); // socket.emit('hello', 'world');\n          // socket.on(\"FromAPI\", (message) => {\n          //   // storeAPI.dispatch({\n          //   //   type: \"SOCKET_MESSAGE_RECEIVED\",\n          //   //   payload : message\n          //   // });\n          // });\n        }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n};\n\nexport default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","setSocketLoading","handleSocketConnect","setSocketError","createSocketMiddleware","url","socket","storeAPI","next","action","dispatch","type","on","data","error","timeout","reason","message"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SACEC,gBADF,EACoBC,mBADpB,EACyCC,cADzC,QAEO,0BAFP;;AAIA,MAAMC,sBAAsB,GAAIC,GAAD,IAAS;AACtC,MAAIC,MAAJ;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnC,UAAMC,QAAQ,GAAGH,QAAQ,CAACG,QAA1B;;AAEA,YAAOD,MAAM,CAACE,IAAd;AACE,WAAKX,sBAAL;AAA6B;AAC3BC,UAAAA,gBAAgB,CAACS,QAAD,EAAW,IAAX,CAAhB;AAEAJ,UAAAA,MAAM,GAAGA,MAAM,IAAIP,cAAc,CAACM,GAAD,CAAjC;AAEAC,UAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7BX,YAAAA,mBAAmB,CAACQ,QAAD,EAAWG,IAAX,CAAnB;AACD,WAFD;AAIAP,UAAAA,MAAM,CAACM,EAAP,CAAU,eAAV,EAA4BE,KAAD,IAAW;AACpCX,YAAAA,cAAc,CAACO,QAAD,EAAWI,KAAX,CAAd;AACD,WAFD;AAIAR,UAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAoBE,KAAD,IAAW;AAC5BX,YAAAA,cAAc,CAACO,QAAD,EAAWI,KAAX,CAAd;AACD,WAFD;AAIAR,UAAAA,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA8BG,OAAD,IAAa;AACxCZ,YAAAA,cAAc,CAACO,QAAD,EAAWK,OAAX,CAAd;AACD,WAFD;AAIAT,UAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAyBI,MAAD,IAAY;AAClC;AACA;AACAb,YAAAA,cAAc,CAACO,QAAD,EAAW;AAAEO,cAAAA,OAAO,EAAED;AAAX,aAAX,CAAd;AACD,WAJD,EArB2B,CA2B3B;AAEA;AACA;AACA;AACA;AACA;AACA;AAKD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDF;;AAmDA,WAAOR,IAAI,CAACC,MAAD,CAAX;AACD,GAvDD;AAwDD,CA3DD;;AA6DA,eAAeL,sBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT } from '../actions/actionTypes';\nimport {\n  setSocketLoading, handleSocketConnect, setSocketError\n} from '../actions/socketActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        setSocketLoading(dispatch, true);\n\n        socket = socket || socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          handleSocketConnect(dispatch, data);\n        });\n\n        socket.on('connect_error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('connect_timeout', (timeout) => {\n          setSocketError(dispatch, timeout);\n        });\n\n        socket.on('disconnect', (reason) => {\n          // reason is a String\n          // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n          setSocketError(dispatch, { message: reason });\n        });\n\n        // socket.emit('hello', 'world');\n\n        // socket.on(\"FromAPI\", (message) => {\n        //   // storeAPI.dispatch({\n        //   //   type: \"SOCKET_MESSAGE_RECEIVED\",\n        //   //   payload : message\n        //   // });\n        // });\n\n\n\n\n      }\n      // case SOCKET_TRIGGER_DISCONNECT: {\n      //   if (socket) { socket.disconnect(); }\n      // }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}