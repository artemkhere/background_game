{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_TRIGGER_DISCONNECT } from '../actions/actionTypes';\nimport { setSocketLoading, handleSocketConnect, setSocketError } from '../actions/socketActions';\n\nconst createSocketMiddleware = url => {\n  let socket;\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        {\n          setSocketLoading(dispatch, true);\n          socket = socket || socketIOClient(url);\n          socket.on('connect', data => {\n            handleSocketConnect(dispatch, data);\n          });\n          socket.on('connect_error', error => {\n            setSocketError(dispatch, error);\n          });\n          socket.on('error', error => {\n            setSocketError(dispatch, error);\n          });\n          socket.on('connect_timeout', timeout => {\n            setSocketError(dispatch, timeout);\n          });\n          socket.on('disconnect', reason => {\n            // reason is a String\n            // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n            setSocketError(dispatch, {\n              message: reason\n            });\n          });\n        }\n\n      case SOCKET_TRIGGER_DISCONNECT:\n        {\n          if (socket) {\n            socket.disconnect();\n          }\n        }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  };\n};\n\nexport default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_TRIGGER_DISCONNECT","setSocketLoading","handleSocketConnect","setSocketError","createSocketMiddleware","url","socket","storeAPI","next","action","dispatch","type","on","data","error","timeout","reason","message","disconnect"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SACEC,sBADF,EAC0BC,yBAD1B,QAEO,wBAFP;AAGA,SACEC,gBADF,EACoBC,mBADpB,EACyCC,cADzC,QAEO,0BAFP;;AAIA,MAAMC,sBAAsB,GAAIC,GAAD,IAAS;AACtC,MAAIC,MAAJ;AAEA,SAAOC,QAAQ,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnC,UAAMC,QAAQ,GAAGH,QAAQ,CAACG,QAA1B;;AAEA,YAAOD,MAAM,CAACE,IAAd;AACE,WAAKZ,sBAAL;AAA6B;AAC3BE,UAAAA,gBAAgB,CAACS,QAAD,EAAW,IAAX,CAAhB;AAEAJ,UAAAA,MAAM,GAAGA,MAAM,IAAIR,cAAc,CAACO,GAAD,CAAjC;AAEAC,UAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7BX,YAAAA,mBAAmB,CAACQ,QAAD,EAAWG,IAAX,CAAnB;AACD,WAFD;AAIAP,UAAAA,MAAM,CAACM,EAAP,CAAU,eAAV,EAA4BE,KAAD,IAAW;AACpCX,YAAAA,cAAc,CAACO,QAAD,EAAWI,KAAX,CAAd;AACD,WAFD;AAIAR,UAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAoBE,KAAD,IAAW;AAC5BX,YAAAA,cAAc,CAACO,QAAD,EAAWI,KAAX,CAAd;AACD,WAFD;AAIAR,UAAAA,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA8BG,OAAD,IAAa;AACxCZ,YAAAA,cAAc,CAACO,QAAD,EAAWK,OAAX,CAAd;AACD,WAFD;AAIAT,UAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAyBI,MAAD,IAAY;AAClC;AACA;AACAb,YAAAA,cAAc,CAACO,QAAD,EAAW;AAAEO,cAAAA,OAAO,EAAED;AAAX,aAAX,CAAd;AACD,WAJD;AAKD;;AACD,WAAKhB,yBAAL;AAAgC;AAC9B,cAAIM,MAAJ,EAAY;AAAEA,YAAAA,MAAM,CAACY,UAAP;AAAsB;AACrC;AACD;AACA;AACA;AACA;AACA;AAnCF;;AAsCA,WAAOV,IAAI,CAACC,MAAD,CAAX;AACD,GA1CD;AA2CD,CA9CD;;AAgDA,eAAeL,sBAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_TRIGGER_DISCONNECT\n} from '../actions/actionTypes';\nimport {\n  setSocketLoading, handleSocketConnect, setSocketError\n} from '../actions/socketActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT: {\n        setSocketLoading(dispatch, true);\n\n        socket = socket || socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          handleSocketConnect(dispatch, data);\n        });\n\n        socket.on('connect_error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('connect_timeout', (timeout) => {\n          setSocketError(dispatch, timeout);\n        });\n\n        socket.on('disconnect', (reason) => {\n          // reason is a String\n          // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n          setSocketError(dispatch, { message: reason });\n        });\n      }\n      case SOCKET_TRIGGER_DISCONNECT: {\n        if (socket) { socket.disconnect(); }\n      }\n      // case \"SEND_WEBSOCKET_MESSAGE\": {\n      //     socket.send(action.payload);\n      //     return;\n      //     break;\n      // }\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}