{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { SOCKET_TRIGGER_CONNECT, SOCKET_TRIGGER_DISCONNECT, SOCKET_EMIT } from '../actions/actionTypes';\nimport { setSocketLoading, handleSocketConnect, setSocketError } from '../actions/socketActions';\nimport { updateGameSessionState } from '../actions/gameSessionActions';\nimport { updateGameSchema } from '../actions/gameSchemaActions';\n\nconst createSocketMiddleware = url => {\n  let socket;\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch (action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        setSocketLoading(dispatch, true); // drop old connection if trying to reconnect\n\n        if (socket) {\n          socket.disconnect();\n        }\n\n        socket = socketIOClient(url);\n        socket.on('connect', data => {\n          const {\n            user\n          } = storeAPI.getState();\n          handleSocketConnect(dispatch, user);\n        });\n        socket.on('connect_error', error => {\n          setSocketError(dispatch, error);\n        });\n        socket.on('error', error => {\n          setSocketError(dispatch, error);\n        });\n        socket.on('gameSessionError', error => {\n          setSocketError(dispatch, error);\n        });\n        socket.on('connect_timeout', timeout => {\n          setSocketError(dispatch, timeout);\n        });\n        socket.on('disconnect', reason => {\n          // reason is a String\n          // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n          setSocketError(dispatch, {\n            message: reason\n          });\n        });\n        socket.on('updateGameSession', data => {\n          updateGameSessionState(dispatch, data);\n        });\n        socket.on('updateGameSchema', data => {\n          updateGameSchema(dispatch, data);\n        });\n        break;\n\n      case SOCKET_TRIGGER_DISCONNECT:\n        if (socket) {\n          socket.disconnect();\n        }\n\n        return;\n\n      case SOCKET_EMIT:\n        const {\n          eventName\n        } = action.payload;\n        const data = action.payload.data || {};\n\n        if (socket && socket.connected) {\n          socket.emit(eventName, data);\n        } else {\n          setSocketError(dispatch, {\n            message: 'Socket is not connected'\n          });\n        }\n\n        return;\n\n      default:\n        break;\n    }\n\n    return next(action);\n  };\n};\n\nexport default createSocketMiddleware;","map":{"version":3,"sources":["/Users/artemk/background_game/frontend/src/store/socketMiddleware.js"],"names":["socketIOClient","SOCKET_TRIGGER_CONNECT","SOCKET_TRIGGER_DISCONNECT","SOCKET_EMIT","setSocketLoading","handleSocketConnect","setSocketError","updateGameSessionState","updateGameSchema","createSocketMiddleware","url","socket","storeAPI","next","action","dispatch","type","disconnect","on","data","user","getState","error","timeout","reason","message","eventName","payload","connected","emit"],"mappings":"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","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_TRIGGER_DISCONNECT, SOCKET_EMIT\n} from '../actions/actionTypes';\nimport {\n  setSocketLoading, handleSocketConnect, setSocketError\n} from '../actions/socketActions';\nimport { updateGameSessionState } from '../actions/gameSessionActions';\nimport { updateGameSchema } from '../actions/gameSchemaActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        setSocketLoading(dispatch, true);\n\n        // drop old connection if trying to reconnect\n        if (socket) { socket.disconnect(); }\n\n        socket = socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          const { user } = storeAPI.getState();\n          handleSocketConnect(dispatch, user);\n        });\n\n        socket.on('connect_error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('gameSessionError', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('connect_timeout', (timeout) => {\n          setSocketError(dispatch, timeout);\n        });\n\n        socket.on('disconnect', (reason) => {\n          // reason is a String\n          // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n          setSocketError(dispatch, { message: reason });\n        });\n\n        socket.on('updateGameSession', (data) => {\n          updateGameSessionState(dispatch, data);\n        });\n\n        socket.on('updateGameSchema', (data) => {\n          updateGameSchema(dispatch, data);\n        });\n        break;\n      case SOCKET_TRIGGER_DISCONNECT:\n        if (socket) { socket.disconnect(); }\n        return;\n      case SOCKET_EMIT:\n        const { eventName } = action.payload;\n        const data = action.payload.data || {};\n\n        if (socket && socket.connected) {\n          socket.emit(eventName, data);\n        } else {\n          setSocketError(dispatch, { message: 'Socket is not connected' });\n        }\n        return;\n      default:\n        break;\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n"]},"metadata":{},"sourceType":"module"}