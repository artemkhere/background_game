{"version":3,"sources":["reducers/initialState.js","reducers/rootReducer.js","reducers/socketReducer.js","actions/actionTypes.js","reducers/gameSessionReducer.js","reducers/applicationStateReducer.js","reducers/userReducer.js","actions/socketActions.js","actions/applicationStateActions.js","store/socketMiddleware.js","actions/gameSessionActions.js","store/configureStore.js","actions/userActions.js","components/TopMenu.jsx","components/ErrorModal.jsx","components/LoadingModal.jsx","components/LandingPage.jsx","components/GameSession/ClickableArea.jsx","components/GameSession/items/ItemShop.jsx","components/GameSession/items/ItemInventory.jsx","components/GameSession/items/ItemsEquipped.jsx","components/GameSession/structures/StructureShop.jsx","components/GameSession/structures/StructureSlots.jsx","components/GameSession/consumables/ConsumableShop.jsx","components/GameSession/consumables/CurrentConsumables.jsx","components/GameSession/GameSession.jsx","components/Login.jsx","components/Signup.jsx","components/Logout.jsx","App.js","serviceWorker.js","index.js"],"names":["socket","error","undefined","timeout","loading","connected","gameSession","gameSaveID","resources","gameState","items","equipped","inventory","structures","built","availableBuildSlots","consumables","gameHistory","clicks","purchased","gameSchema","itemShop","structureShop","consumableShop","applicationState","currentScreen","user","id","email","loggedIn","rootReducer","combineReducers","state","initialState","action","type","Object","assign","payload","connectToSocket","dispatch","setSocketError","disconnectFromSocket","socketEmit","event","setCurrentScreen","data","setApplicationError","setApplicationLoading","createSocketMiddleware","url","storeAPI","next","setSocketLoading","disconnect","socketIOClient","on","getState","jwt","localStorage","getItem","userID","eventName","token","handleSocketConnect","reason","message","setItem","updateGameSession","emit","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","socketMiddleware","setUserData","setUserLoggedIn","connect","props","userLoggedIn","handleLogin","handleLogout","removeItem","handleSignup","style","textAlign","onClick","toRender","renderMainSection","className","itemList","map","item","shouldDisplay","baseInfo","name","price","description","canBePurchased","itemName","actionType","canBePurchasedRequirements","shouldDisplayRequirements","handleEquipItem","handleUnequipItem","equippedIndex","structureList","structure","structureName","structuresBuilt","handleSellStructure","builtIndex","consumableList","consumable","consumableName","consumablesList","useState","loginStep","setLoginStep","setEmail","password","setPassword","handleEmailChange","target","value","handlePasswordChange","handleSubmit","a","preventDefault","axios","post","loginResponse","userData","handleStartNewGame","onSubmit","placeholder","onChange","required","minLength","maxLength","renderLoginStep","signupStep","setSignupStep","newUserResponse","renderSignupStep","Logout","authenticate","authResponse","console","useEffect","Boolean","location","hostname","match","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0a81eb9f.chunk.js","sourcesContent":["export default {\n  socket: {\n    error: undefined,\n    timeout: undefined,\n    loading: undefined,\n    connected: false\n  },\n  gameSession: {\n    gameSaveID: 0,\n    resources: 0,\n    gameState: {\n      items: {\n        equipped: [],\n        inventory: []\n      },\n      structures: {\n        built: [],\n        availableBuildSlots: 1\n      },\n      consumables: []\n    },\n    gameHistory: {\n      resources: 0,\n      clicks: 0,\n      items: {\n        purchased: []\n      },\n      structures: {\n        purchased: []\n      }\n    },\n    gameSchema: {\n      itemShop: [],\n      structureShop: [],\n      consumableShop: []\n    }\n  },\n  applicationState: {\n    currentScreen: 'LandingPage',\n    error: undefined,\n    loading: false\n  },\n  user: {\n    id: 0,\n    email: '',\n    loggedIn: false\n  }\n};\n","import { combineReducers } from 'redux';\nimport socket from './socketReducer';\nimport gameSession from './gameSessionReducer';\nimport applicationState from './applicationStateReducer';\nimport user from './userReducer';\n\nconst rootReducer = combineReducers({\n  socket,\n  gameSession,\n  applicationState,\n  user\n});\n\nexport default rootReducer;\n","import initialState from './initialState';\nimport {\n  SOCKET_SET_LOADING, SOCKET_CONNECT, SOCKET_SET_ERROR\n} from '../actions/actionTypes';\n\nexport default function count(state = initialState.socket, action) {\n  switch (action.type) {\n    case SOCKET_SET_LOADING:\n      return Object.assign({}, state, {\n        loading: action.payload,\n        error: false,\n        connected: false\n      });\n    case SOCKET_CONNECT:\n      return Object.assign({}, state, {\n        loading: false,\n        error: false,\n        connected: true\n      });\n    case SOCKET_SET_ERROR:\n      return Object.assign({}, state, {\n        loading: false,\n        error: action.payload\n      });\n    default:\n      return state;\n  }\n}\n","export const SOCKET_TRIGGER_CONNECT = \"SOCKET_TRIGGER_CONNECT\";\nexport const SOCKET_SET_ERROR = \"SOCKET_SET_ERROR\";\nexport const SOCKET_CONNECT = \"SOCKET_CONNECT\";\nexport const SOCKET_TRIGGER_DISCONNECT = \"SOCKET_TRIGGER_DISCONNECT\";\nexport const SOCKET_SET_LOADING = \"SOCKET_SET_LOADING\";\nexport const SOCKET_EMIT = \"SOCKET_EMIT\";\n\nexport const UPDATE_GAME_SESSION = 'UPDATE_GAME_SESSION';\n\nexport const SET_CURRENT_SCREEN = 'SET_CURRENT_SCREEN';\nexport const SET_APPLICATION_ERROR = 'SET_APPLICATION_ERROR';\nexport const SET_APPLICATION_LOADING = 'SET_APPLICATION_LOADING';\n\nexport const SET_USER_DATA = 'SET_USER_DATA';\nexport const SET_USER_LOGGED_IN = 'SET_USER_LOGGED_IN';\n","import initialState from './initialState';\nimport { UPDATE_GAME_SESSION } from '../actions/actionTypes';\n\nexport default function count(state = initialState.gameSession, action) {\n  switch (action.type) {\n    case UPDATE_GAME_SESSION:\n      return Object.assign({}, state, action.payload);\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport {\n  SET_CURRENT_SCREEN, SET_APPLICATION_ERROR, SET_APPLICATION_LOADING\n} from '../actions/actionTypes';\n\nexport default function count(state = initialState.applicationState, action) {\n  switch (action.type) {\n    case SET_CURRENT_SCREEN:\n      return Object.assign({}, state, {\n        currentScreen: action.payload,\n        loading: false,\n        error: false\n      });\n    case SET_APPLICATION_ERROR:\n      return Object.assign({}, state, {\n        error: action.payload,\n        loading: false\n      });\n    case SET_APPLICATION_LOADING:\n      return Object.assign({}, state, {\n        loading: action.payload,\n        error: false\n      });\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport {\n  SET_USER_DATA, SET_USER_LOGGED_IN\n} from '../actions/actionTypes';\n\nexport default function count(state = initialState.user, action) {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return Object.assign({}, state, {\n        id: action.payload.id,\n        email: action.payload.email,\n        loggedIn: action.payload.loggedIn\n      });\n    case SET_USER_LOGGED_IN:\n      return Object.assign({}, state, {\n        loggedIn: action.payload\n      });\n    default:\n      return state;\n  }\n}\n","import {\n  SOCKET_TRIGGER_CONNECT, SOCKET_SET_ERROR, SOCKET_CONNECT,\n  SOCKET_TRIGGER_DISCONNECT, SOCKET_SET_LOADING, SOCKET_EMIT\n} from './actionTypes';\n\nexport function connectToSocket(dispatch) {\n  return () => {\n    dispatch({ type: SOCKET_TRIGGER_CONNECT });\n  }\n}\n\nexport function setSocketLoading(dispatch, loading) {\n  dispatch({\n    type: SOCKET_SET_LOADING,\n    payload: loading\n  });\n}\n\nexport function handleSocketConnect(dispatch, user) {\n  const jwt = localStorage.getItem('jwt');\n  const userID = user.id;\n  const gameSaveID = localStorage.getItem('gameSaveID');\n\n  socketEmit(dispatch)({\n    eventName: 'startGameSession',\n    data: { userID, gameSaveID, token: jwt }\n  });\n\n  dispatch({ type: SOCKET_CONNECT });\n}\n\nexport function setSocketError(dispatch, error) {\n  dispatch({\n    type: SOCKET_SET_ERROR,\n    payload: error\n  });\n}\n\nexport function disconnectFromSocket(dispatch) {\n  return () => {\n    dispatch({ type: SOCKET_TRIGGER_DISCONNECT });\n  }\n}\n\nexport function socketEmit(dispatch) {\n  return (event) => {\n    dispatch({\n      type: SOCKET_EMIT,\n      payload: event\n    });\n  }\n}\n","import {\n  SET_CURRENT_SCREEN, SET_APPLICATION_ERROR, SET_APPLICATION_LOADING\n} from './actionTypes';\n\nexport function setCurrentScreen(dispatch) {\n  return (data) => {\n    dispatch({\n      type: SET_CURRENT_SCREEN,\n      payload: data\n    });\n  }\n}\n\nexport function setApplicationError(dispatch) {\n  return (data) => {\n    dispatch({\n      type: SET_APPLICATION_ERROR,\n      payload: data\n    });\n  }\n}\n\nexport function setApplicationLoading(dispatch) {\n  return (data) => {\n    dispatch({\n      type: SET_APPLICATION_LOADING,\n      payload: data\n    });\n  }\n}\n","import socketIOClient from 'socket.io-client';\nimport {\n  SOCKET_TRIGGER_CONNECT, SOCKET_TRIGGER_DISCONNECT, SOCKET_EMIT\n} from '../actions/actionTypes';\nimport {\n  setSocketLoading, handleSocketConnect, setSocketError\n} from '../actions/socketActions';\nimport { setApplicationError } from '../actions/applicationStateActions';\nimport { updateGameSession } from '../actions/gameSessionActions';\n\nconst createSocketMiddleware = (url) => {\n  let socket;\n\n  return storeAPI => next => action => {\n    const dispatch = storeAPI.dispatch;\n\n    switch(action.type) {\n      case SOCKET_TRIGGER_CONNECT:\n        setSocketLoading(dispatch, true);\n\n        // drop old connection if trying to reconnect\n        if (socket) { socket.disconnect(); }\n\n        socket = socketIOClient(url);\n\n        socket.on('connect', (data) => {\n          const { user } = storeAPI.getState();\n          handleSocketConnect(dispatch, user);\n        });\n\n        socket.on('connect_error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('error', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('gameSessionError', (error) => {\n          setSocketError(dispatch, error);\n        });\n\n        socket.on('operationFailed', (error) => {\n          setApplicationError(dispatch)(error);\n        });\n\n        socket.on('connect_timeout', (timeout) => {\n          setSocketError(dispatch, timeout);\n        });\n\n        socket.on('disconnect', (reason) => {\n          // reason is a String\n          // ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’\n          setSocketError(dispatch, { message: reason });\n        });\n\n        socket.on('updateGameSession', (data) => {\n          updateGameSession(dispatch, data);\n        });\n\n        break;\n      case SOCKET_TRIGGER_DISCONNECT:\n        if (socket) { socket.disconnect(); }\n        return;\n      case SOCKET_EMIT:\n        const { eventName } = action.payload;\n        const data = action.payload.data || {};\n\n        if (socket && socket.connected) {\n          socket.emit(eventName, data);\n        } else {\n          setSocketError(dispatch, { message: 'Socket is not connected' });\n        }\n        return;\n      default:\n        break;\n    }\n\n    return next(action);\n  }\n}\n\nexport default createSocketMiddleware;\n","import { UPDATE_GAME_SESSION } from './actionTypes';\n\nexport function updateGameSession(dispatch, data) {\n  // store gameSaveID for future sessions if user is not logged in\n  if (data.gameSaveID) {\n    localStorage.setItem('gameSaveID', data.gameSaveID);\n  }\n\n  dispatch({\n    type: UPDATE_GAME_SESSION,\n    payload: data\n  });\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from '../reducers/rootReducer';\nimport createSocketMiddleware from './socketMiddleware';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst socketMiddleware = createSocketMiddleware(\"http://127.0.0.1:6969\");\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    composeEnhancer(applyMiddleware(socketMiddleware))\n  );\n}\n","import {\n  SET_USER_DATA, SET_USER_LOGGED_IN\n} from './actionTypes';\n\nexport function setUserData(dispatch) {\n  return (data) => {\n    dispatch({\n      type: SET_USER_DATA,\n      payload: data\n    });\n  }\n}\n\nexport function setUserLoggedIn(dispatch) {\n  return (data) => {\n    dispatch({\n      type: SET_USER_LOGGED_IN,\n      payload: data\n    });\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { connectToSocket, disconnectFromSocket } from '../actions/socketActions';\nimport { setCurrentScreen } from '../actions/applicationStateActions';\nimport { setUserLoggedIn } from '../actions/userActions';\n\nfunction TopMenu(props) {\n  const {\n    connectToSocket, disconnectFromSocket, setCurrentScreen,\n    setUserLoggedIn, user\n  } = props;\n  const userLoggedIn = user.loggedIn;\n\n  const handlePlay = () => {\n    setCurrentScreen('GameSession');\n    connectToSocket();\n  }\n\n  const handleLogin = () => {\n    setCurrentScreen('Login');\n  }\n\n  const handleLogout = () => {\n    disconnectFromSocket();\n    localStorage.removeItem('jwt');\n    localStorage.removeItem('gameSaveID');\n    setUserLoggedIn(false);\n    setCurrentScreen('Logout');\n  }\n\n  const handleSignup = () => {\n    disconnectFromSocket();\n    setCurrentScreen('Signup');\n  }\n\n  const renderMainSection = () => {\n    let toRender = (\n      <>\n        <button onClick={handleLogin}>Login</button>\n        <button onClick={handleSignup}>Sign Up</button>\n      </>\n    );\n\n    if (userLoggedIn) {\n      toRender = (\n        <>\n          <button>Profile</button>\n          <button onClick={handleLogout}>Logout</button>\n        </>\n      );\n    }\n\n    return toRender;\n  }\n\n  return (\n    <div style={{ textAlign: \"right\" }}>\n      <button onClick={handlePlay}>Play</button>\n      {renderMainSection()}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    disconnectFromSocket: disconnectFromSocket(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch),\n    setUserLoggedIn: setUserLoggedIn(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TopMenu);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { setApplicationError } from '../actions/applicationStateActions';\n\nfunction ErrorModal(props) {\n  const { setApplicationError, applicationState } = props;\n  const error = applicationState.error;\n\n  const handleCloseModal = () => {\n    setApplicationError(false);\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div>Error: {error && error.message}</div>\n      <button onClick={handleCloseModal}>Close</button>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    applicationState: state.applicationState\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setApplicationError: setApplicationError(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ErrorModal);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { setApplicationLoading } from '../actions/applicationStateActions';\n\nfunction LoadingModal(props) {\n  const { setApplicationLoading } = props;\n\n  const handleCloseModal = () => {\n    setApplicationLoading(false);\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div>Loading</div>\n      <button onClick={handleCloseModal}>Close</button>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setApplicationLoading: setApplicationLoading(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoadingModal);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { connectToSocket } from '../actions/socketActions';\nimport { setCurrentScreen } from '../actions/applicationStateActions';\n\nfunction LandingPage(props) {\n  const { connectToSocket, setCurrentScreen } = props;\n\n  const handleStartNewGame = () => {\n    setCurrentScreen('GameSession');\n    connectToSocket();\n  }\n\n  const handleSignup = () => {\n    setCurrentScreen('Signup');\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <button onClick={handleStartNewGame}>Start New Game</button>\n      <button onClick={handleSignup}>Sign Up</button>\n    </div>\n  );\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    socket: state.socket\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LandingPage);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../actions/socketActions';\n\nfunction ClickableArea(props) {\n  const handleClick = () => {\n    props.socketEmit({ eventName: 'areaClicked' });\n  }\n\n  return (\n    <div className=\"waste-container\">\n      <button\n        className=\"waste-button\"\n        onClick={handleClick}\n      >\n        Click me\n      </button>\n    </div>\n  );\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch)\n  };\n}\n\nexport default connect(\n  () => { return {}; },\n  mapDispatchToProps\n)(ClickableArea);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../../actions/socketActions';\n\nfunction ItemShop(props) {\n  const { socketEmit } = props;\n  const { gameSchema } = props.gameSession;\n\n  const handleBuyItem = (itemName) => {\n    return () => {\n      socketEmit({\n        eventName: 'itemAction',\n        data: { actionType: 'buy', itemName }\n      });\n    }\n  }\n\n  // parse items to be displayed and not shown\n  const itemList = gameSchema.itemShop.map((item) => {\n    if (item.shouldDisplay) {\n      const baseInfo = (\n        <div>\n          <div>Name: {item.name}</div>\n          <div>Price: {item.price}</div>\n          <div>Description: {item.description}</div>\n        </div>\n      );\n\n      if (item.canBePurchased) {\n        return (\n          <div>\n            {baseInfo}\n            <button onClick={handleBuyItem(item.name)}>Buy Item</button>\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            {baseInfo}\n            <div>Requirements to buy: {item.canBePurchasedRequirements}</div>\n          </div>\n        );\n      }\n    } else {\n      return (\n        <div>\n          <div>??? MYSTERY ITEM ???</div>\n          <div>Will show when: {item.shouldDisplayRequirements}</div>\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div style={{ textAlign: \"left\" }}>\n      <div>Item Shop:</div>\n      {itemList}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ItemShop);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../../actions/socketActions';\n\nfunction ItemInventory(props) {\n  const { socketEmit } = props;\n  const { gameState } = props.gameSession;\n\n  const handleSellItem = (itemName) => {\n    return () => {\n      socketEmit({\n        eventName: 'itemAction',\n        data: { actionType: 'sell', itemName }\n      });\n    }\n  }\n\n  const handleEquipItem = (itemName) => {\n    return () => {\n      socketEmit({\n        eventName: 'itemAction',\n        data: { actionType: 'equip', itemName }\n      });\n    }\n  }\n\n  const itemList = (inventory) => {\n    return (\n      <>\n        {inventory.map((item) => {\n          return (\n            <div>\n              <div>Name: {item.name}</div>\n              <div>Price: {item.price}</div>\n              <div>Description: {item.description}</div>\n              <button onClick={handleSellItem(item.name)}>Sell</button>\n              <button onClick={handleEquipItem(item.name)}>Equip</button>\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"right\" }}>\n      <div>Inventory:</div>\n      {itemList(gameState.items.inventory)}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ItemInventory);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../../actions/socketActions';\n\nfunction ItemsEquipped(props) {\n  const { socketEmit } = props;\n  const { gameState } = props.gameSession;\n\n  const handleUnequipItem = (equippedIndex) => {\n    return () => {\n      socketEmit({\n        eventName: 'itemAction',\n        data: { actionType: 'unequip', equippedIndex }\n      });\n    }\n  }\n\n  const handleBuyEquipSlot = () => {\n    socketEmit({\n      eventName: 'itemAction',\n      data: { actionType: 'buyEquipSlot' }\n    });\n  }\n\n  const equippedList = (equipped) => {\n    return (\n      <>\n        {equipped.map((item, equippedIndex) => {\n          return (\n            <div>\n              <div>Name: {item.name}</div>\n              <button onClick={handleUnequipItem(equippedIndex)}>Unequip</button>\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"left\" }}>\n      <div>Equipped Items:</div>\n      {equippedList(gameState.items.equipped)}\n      <button onClick={handleBuyEquipSlot}>+</button>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ItemsEquipped);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../../actions/socketActions';\n\nfunction StructureShop(props) {\n  const { socketEmit } = props;\n  const { gameSchema } = props.gameSession;\n\n  const handleBuyStructure = (structureName) => {\n    return () => {\n      socketEmit({\n        eventName: 'structureAction',\n        data: { actionType: 'buy', structureName }\n      });\n    }\n  }\n\n  // parse structures to be displayed and not shown\n  const structureList = gameSchema.structureShop.map((structure) => {\n    if (structure.shouldDisplay) {\n      const baseInfo = (\n        <div>\n          <div>Name: {structure.name}</div>\n          <div>Price: {structure.price}</div>\n          <div>Description: {structure.description}</div>\n        </div>\n      );\n\n      if (structure.canBePurchased) {\n        return (\n          <div>\n            {baseInfo}\n            <button onClick={handleBuyStructure(structure.name)}>Buy Structure</button>\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            {baseInfo}\n            <div>Requirements to buy: {structure.canBePurchasedRequirements}</div>\n          </div>\n        );\n      }\n    } else {\n      return (\n        <div>\n          <div>??? MYSTERY STRUCTURE ???</div>\n          <div>Will show when: {structure.shouldDisplayRequirements}</div>\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div style={{ textAlign: \"right\" }}>\n      <div>Structure Shop:</div>\n      {structureList}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StructureShop);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../../actions/socketActions';\n\nfunction StructureSlots(props) {\n  const { socketEmit } = props;\n  const { gameState } = props.gameSession;\n\n  const handleSellStructure = (builtIndex) => {\n    return () => {\n      socketEmit({\n        eventName: 'structureAction',\n        data: { actionType: 'sell', builtIndex }\n      });\n    }\n  }\n\n  const handleBuyBuildSlot = () => {\n    socketEmit({\n      eventName: 'structureAction',\n      data: { actionType: 'buyBuildSlot' }\n    });\n  }\n\n  const structureSlots = (structuresBuilt) => {\n    return (\n      <>\n        {structuresBuilt.map((structure, builtIndex) => {\n          return (\n            <div>\n              <div>Name: {structure.name}</div>\n              <button onClick={handleSellStructure(builtIndex)}>Sell</button>\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"left\" }}>\n      <div>Structures:</div>\n      {structureSlots(gameState.structures.built)}\n      <button onClick={handleBuyBuildSlot}>+</button>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StructureSlots);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { socketEmit } from '../../../actions/socketActions';\n\nfunction ConsumableShop(props) {\n  const { socketEmit } = props;\n  const { gameSchema } = props.gameSession;\n\n  const handleBuyConsumable = (consumableName) => {\n    return () => {\n      socketEmit({\n        eventName: 'consumableAction',\n        data: { actionType: 'buy', consumableName }\n      });\n    }\n  }\n\n  // parse consumables to be displayed and not shown\n  const consumableList = gameSchema.consumableShop.map((consumable) => {\n    if (consumable.shouldDisplay) {\n      return (\n        <div>\n          <div>Name: {consumable.name}</div>\n          <div>Price: {consumable.price}</div>\n          <div>Description: {consumable.description}</div>\n          <button onClick={handleBuyConsumable(consumable.name)}>Buy Consumable</button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div>??? MYSTERY STRUCTURE ???</div>\n          <div>Will show when: {consumable.shouldDisplayRequirements}</div>\n        </div>\n      );\n    }\n  });\n\n  return (\n    <div style={{ textAlign: \"left\" }}>\n      <div>Consumable Shop:</div>\n      {consumableList}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    socketEmit: socketEmit(dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConsumableShop);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction CurrentConsumables(props) {\n  const { consumables } = props.gameSession.gameState;\n\n  const consumablesList = (consumables) => {\n    return (\n      <>\n        {consumables.map((consumable) => {\n          return (\n            <div>\n              <div>Name: {consumable.name}</div>\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"right\" }}>\n      <div>Current Consumables:</div>\n      {consumablesList(consumables)}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    gameSession: state.gameSession,\n  };\n}\n\nexport default connect(\n  mapStateToProps\n)(CurrentConsumables);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  connectToSocket, disconnectFromSocket, socketEmit\n} from '../../actions/socketActions';\nimport { setCurrentScreen } from '../../actions/applicationStateActions';\nimport ClickableArea from './ClickableArea';\nimport ItemShop from './items/ItemShop';\nimport ItemInventory from './items/ItemInventory';\nimport ItemsEquipped from './items/ItemsEquipped';\nimport StructureShop from './structures/StructureShop';\nimport StructureSlots from './structures/StructureSlots';\nimport ConsumableShop from './consumables/ConsumableShop';\nimport CurrentConsumables from './consumables/CurrentConsumables';\n\nfunction GameSession(props) {\n  const { error, loading } = props.socket;\n  const { resources, gameState } = props.gameSession;\n\n  const {\n    connectToSocket, disconnectFromSocket, setCurrentScreen,\n    socketEmit\n  } = props;\n\n  if (error) {\n    return (\n      <div>\n        <div>There was an error</div>\n        <button onClick={connectToSocket}>Reconnect</button>\n      </div>\n    );\n  };\n\n  if (loading) { return <div>Loading...</div>; }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <ItemShop />\n      <ItemInventory />\n      <div>Resources: {resources}</div>\n      <ClickableArea />\n      <ItemsEquipped />\n      <StructureShop />\n      <StructureSlots />\n      <ConsumableShop />\n      <CurrentConsumables />\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    socket: state.socket,\n    gameSession: state.gameSession\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    disconnectFromSocket: disconnectFromSocket(dispatch),\n    socketEmit: socketEmit(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GameSession);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport { connectToSocket } from '../actions/socketActions';\nimport {\n  setCurrentScreen, setApplicationLoading, setApplicationError\n} from '../actions/applicationStateActions';\nimport { setUserData } from '../actions/userActions';\n\nfunction Login(props) {\n  const {\n    connectToSocket, setCurrentScreen, setUserData, user,\n    setApplicationLoading, setApplicationError\n  } = props;\n  const [loginStep, setLoginStep] = useState('LoginForm');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  }\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setApplicationLoading(true);\n\n    try {\n      const loginResponse = await axios.post(\"http://127.0.0.1:6969/api/login\", { email, password });\n      localStorage.setItem('jwt', loginResponse.data.jwt);\n      const userData = {\n        id: loginResponse.data.id,\n        email: loginResponse.data.email,\n        loggedIn: true\n      };\n      setUserData(userData);\n      localStorage.removeItem('gameSaveID');\n      setLoginStep('LoginSuccess');\n      setApplicationLoading(false);\n    } catch (error) {\n      setApplicationError(error);\n    }\n  }\n\n  const loginForm = () => {\n    return (\n      <form onSubmit={handleSubmit}>\n        <h1>Login Into Your Account</h1>\n        <label>Email</label>\n        <input\n          name='email'\n          type='email'\n          placeholder='Email'\n          value={email}\n          onChange={handleEmailChange}\n          required\n        />\n        <br/>\n        <label>Password</label>\n        <input\n          type='password'\n          name='password'\n          placeholder='Password'\n          value={password}\n          onChange={handlePasswordChange}\n          minLength=\"4\"\n          maxLength=\"24\"\n          required\n        />\n        <input type='submit'/>\n      </form>\n    );\n  }\n\n  const handleStartNewGame = () => {\n    setCurrentScreen('GameSession');\n    connectToSocket();\n  }\n\n  const loginSuccess = () => {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <div>Logged in as: {user.email}</div>\n        <div>User ID: {user.id}</div>\n        <button onClick={handleStartNewGame}>Start New Game</button>\n      </div>\n    );\n  }\n\n  const renderLoginStep = () => {\n    let toRender;\n\n    switch(loginStep) {\n      case 'LoginForm':\n        toRender = loginForm();\n        break;\n      case 'LoginSuccess':\n        toRender = loginSuccess();\n        break;\n      default:\n        toRender = <div>Error</div>;\n    }\n\n    return toRender;\n  }\n\n  return (\n    <div>{renderLoginStep()}</div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    socket: state.socket,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch),\n    setUserData: setUserData(dispatch),\n    setApplicationLoading: setApplicationLoading(dispatch),\n    setApplicationError: setApplicationError(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport { connectToSocket } from '../actions/socketActions';\nimport {\n  setCurrentScreen, setApplicationLoading, setApplicationError\n} from '../actions/applicationStateActions';\nimport { setUserData } from '../actions/userActions';\n\nfunction Signup(props) {\n  const {\n    connectToSocket, setCurrentScreen, setUserData, user,\n    setApplicationLoading, setApplicationError, gameSession\n  } = props;\n  const [signupStep, setSignupStep] = useState('SignupForm');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  }\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setApplicationLoading(true);\n\n    try {\n      const newUserResponse = await axios.post(\"http://127.0.0.1:6969/api/signup\", {\n        email,\n        password,\n        gameSaveID: gameSession.gameSaveID || localStorage.getItem('gameSaveID')\n      });\n      localStorage.setItem('jwt', newUserResponse.data.jwt);\n      const userData = {\n        id: newUserResponse.data.id,\n        email: newUserResponse.data.email,\n        loggedIn: true\n      };\n      setUserData(userData);\n      setSignupStep('SignupSuccess');\n      setApplicationLoading(false);\n    } catch (error) {\n      setApplicationError(error);\n    }\n  }\n\n  const signupForm = () => {\n    return (\n      <form onSubmit={handleSubmit}>\n        <h1>Sign Up For An Account</h1>\n        <label>Email</label>\n        <input\n          name='email'\n          type='email'\n          placeholder='Email'\n          value={email}\n          onChange={handleEmailChange}\n          required\n        />\n        <br/>\n        <label>Password</label>\n        <input\n          type='password'\n          name='password'\n          placeholder='Password'\n          value={password}\n          onChange={handlePasswordChange}\n          minLength=\"4\"\n          maxLength=\"24\"\n          required\n        />\n        <input type='submit'/>\n      </form>\n    );\n  }\n\n  const handleStartNewGame = () => {\n    setCurrentScreen('GameSession');\n    // in this connectToSocket I will need to pass userID and jwt\n    connectToSocket();\n  }\n\n  const signupSuccess = () => {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <div>Congrats, your account had been created!</div>\n        <div>Signed in as: {user.email}</div>\n        <div>User ID: {user.id}</div>\n        <button onClick={handleStartNewGame}>Start New Game</button>\n      </div>\n    );\n  }\n\n  const renderSignupStep = () => {\n    let toRender;\n\n    switch(signupStep) {\n      case 'SignupForm':\n        toRender = signupForm();\n        break;\n      case 'SignupSuccess':\n        toRender = signupSuccess();\n        break;\n      default:\n        toRender = <div>Error</div>;\n    }\n\n    return toRender;\n  }\n\n  return (\n    <div>{renderSignupStep()}</div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    socket: state.socket,\n    user: state.user,\n    gameSession: state.gameSession\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    connectToSocket: connectToSocket(dispatch),\n    setCurrentScreen: setCurrentScreen(dispatch),\n    setUserData: setUserData(dispatch),\n    setApplicationLoading: setApplicationLoading(dispatch),\n    setApplicationError: setApplicationError(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Signup);\n","import React from 'react';\n\nfunction Logout(props) {\n  return <div>You have logged out.</div>;\n}\n\nexport default Logout;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport \"./App.scss\";\n\nimport { setUserData } from './actions/userActions';\n\nimport TopMenu from './components/TopMenu';\nimport ErrorModal from './components/ErrorModal';\nimport LoadingModal from './components/LoadingModal';\nimport LandingPage from './components/LandingPage';\nimport GameSession from './components/GameSession/GameSession';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport Logout from './components/Logout';\n\nfunction App(props) {\n  const { setUserData, user, applicationState } = props;\n\n  const authenticate = async (jwt) => {\n    try {\n      const authResponse = await axios.post(\"http://127.0.0.1:6969/api/auth\", { token: jwt });\n      const userData = {\n        id: authResponse.data.id,\n        email: authResponse.data.email,\n        loggedIn: true\n      };\n      setUserData(userData);\n    } catch (error) {\n      console.error('Error: failed to auth with jwt.')\n    }\n  }\n\n  useEffect(() => {\n    const jwt = localStorage.getItem('jwt');\n    if (jwt && !user.loggedIn) { authenticate(jwt); }\n  });\n\n  const renderMainSection = () => {\n    let toRender;\n\n    switch(applicationState.currentScreen) {\n      case 'LandingPage':\n        toRender = <LandingPage />;\n        break;\n      case 'GameSession':\n        toRender = <GameSession />;\n        break;\n      case 'Login':\n        toRender = <Login />;\n        break;\n      case 'Signup':\n        toRender = <Signup />;\n        break;\n      case 'Logout':\n        toRender = <Logout />;\n        break;\n      default:\n        toRender = <div>Error</div>;\n    }\n\n    return toRender;\n  }\n\n  return (\n    <div>\n      <TopMenu />\n      {applicationState.error && <ErrorModal />}\n      {applicationState.loading && <LoadingModal />}\n      {renderMainSection()}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    applicationState: state.applicationState,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setUserData: setUserData(dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport configureStore from './store/configureStore';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}